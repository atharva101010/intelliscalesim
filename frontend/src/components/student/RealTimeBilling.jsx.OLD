import React, { useState, useEffect } from 'react';
import { DollarSign, Clock, Activity, TrendingUp, AlertCircle, Package, CheckCircle } from 'lucide-react';

const RealTimeBilling = () => {
  const [activeContainers, setActiveContainers] = useState([]);
  const [billingHistory, setBillingHistory] = useState([]);
  const [loading, setLoading] = useState(true);
  const [totalCost, setTotalCost] = useState(0);

  const fetchActiveBillings = async () => {
    try {
      const response = await fetch('http://localhost:8000/api/billing/containers/active');
      const data = await response.json();
      setActiveContainers(data);
      const total = data.reduce((sum, container) => sum + container.total_cost, 0);
      setTotalCost(total);
    } catch (error) {
      console.error('Error fetching active billings:', error);
    }
  };

  const fetchHistory = async () => {
    try {
      const response = await fetch('http://localhost:8000/api/billing/history');
      const data = await response.json();
      setBillingHistory(data);
      setLoading(false);
    } catch (error) {
      console.error('Error fetching history:', error);
      setLoading(false);
    }
  };

  useEffect(() => {
    fetchActiveBillings();
    fetchHistory();
    const interval = setInterval(() => {
      fetchActiveBillings();
    }, 5000);
    return () => clearInterval(interval);
  }, []);

  const formatDuration = (seconds) => {
    if (!seconds) return '0s';
    const hours = Math.floor(seconds / 3600);
    const minutes = Math.floor((seconds % 3600) / 60);
    const secs = seconds % 60;
    return `${hours}h ${minutes}m ${secs}s`;
  };

  const formatTime = (isoString) => {
    if (!isoString) return 'N/A';
    return new Date(isoString).toLocaleString();
  };

  if (loading) {
    return (
      <div className="flex items-center justify-center h-64">
        <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600"></div>
      </div>
    );
  }

  return (
    <div className="space-y-6">
      {/* Cost Summary Card */}
      <div className="bg-gradient-to-br from-green-50 to-emerald-50 border-2 border-green-200 rounded-xl p-6 shadow-lg">
        <div className="flex items-center justify-between">
          <div>
            <p className="text-sm font-medium text-green-600 mb-1">ðŸ’° Total Active Cost</p>
            <h2 className="text-4xl font-bold text-green-700">
              ${totalCost.toFixed(4)}
            </h2>
            <p className="text-xs text-green-600 mt-2">
              {activeContainers.length} container{activeContainers.length !== 1 ? 's' : ''} running
            </p>
          </div>
          <div className="bg-white rounded-full p-4 shadow-md">
            <DollarSign className="h-10 w-10 text-green-600" />
          </div>
        </div>
      </div>

      {/* Active Containers Section */}
      <div className="bg-white rounded-xl shadow-lg overflow-hidden">
        <div className="bg-gradient-to-r from-blue-500 to-blue-600 px-6 py-4">
          <div className="flex items-center text-white">
            <Activity className="h-6 w-6 mr-3" />
            <h2 className="text-xl font-bold">
              Active Containers ({activeContainers.length})
            </h2>
          </div>
        </div>

        <div className="p-6">
          {activeContainers.length === 0 ? (
            <div className="text-center py-16">
              <div className="inline-flex items-center justify-center w-20 h-20 bg-blue-100 rounded-full mb-4">
                <Package className="h-10 w-10 text-blue-500" />
              </div>
              <h3 className="text-lg font-semibold text-gray-900 mb-2">
                No Active Containers
              </h3>
              <p className="text-gray-500 mb-4">
                Deploy a container to start tracking real-time costs
              </p>
              <div className="inline-flex items-center px-4 py-2 bg-blue-50 text-blue-700 rounded-lg text-sm">
                <AlertCircle className="h-4 w-4 mr-2" />
                Costs will appear here automatically
              </div>
            </div>
          ) : (
            <div className="grid gap-4">
              {activeContainers.map((container) => (
                <div
                  key={container.billing_id}
                  className="border-2 border-gray-200 rounded-lg p-5 hover:shadow-xl hover:border-blue-300 transition-all duration-200"
                >
                  <div className="flex justify-between items-start">
                    <div className="flex-1">
                      <div className="flex items-center mb-2">
                        <div className="w-3 h-3 bg-green-500 rounded-full mr-2 animate-pulse"></div>
                        <h3 className="text-lg font-bold text-gray-900">
                          {container.container_name}
                        </h3>
                        <span className="ml-3 px-3 py-1 bg-gradient-to-r from-blue-500 to-blue-600 text-white text-xs font-semibold rounded-full">
                          {container.provider}
                        </span>
                      </div>
                      <p className="text-sm text-gray-500 mb-3">
                        <code className="bg-gray-100 px-2 py-1 rounded text-xs">
                          {container.container_id}
                        </code>
                      </p>
                      
                      <div className="grid grid-cols-2 gap-4 text-sm">
                        <div className="bg-gray-50 rounded-lg p-3">
                          <span className="text-gray-500 block mb-1">CPU Cores</span>
                          <span className="font-bold text-gray-900">{container.cpu_cores} cores</span>
                        </div>
                        <div className="bg-gray-50 rounded-lg p-3">
                          <span className="text-gray-500 block mb-1">Memory</span>
                          <span className="font-bold text-gray-900">{container.memory_gb} GB</span>
                        </div>
                        <div className="col-span-2 bg-blue-50 rounded-lg p-3">
                          <Clock className="inline h-4 w-4 text-blue-600 mr-2" />
                          <span className="text-blue-700 font-semibold">
                            {formatDuration(container.duration_seconds)}
                          </span>
                          <span className="text-xs text-blue-600 ml-2">
                            (started {formatTime(container.start_time)})
                          </span>
                        </div>
                      </div>
                    </div>
                    
                    <div className="text-right ml-6">
                      <div className="bg-gradient-to-br from-green-100 to-emerald-100 rounded-xl p-4 shadow-md">
                        <p className="text-xs text-green-600 font-medium mb-1">Current Cost</p>
                        <div className="text-3xl font-bold text-green-700">
                          ${container.total_cost.toFixed(4)}
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              ))}
            </div>
          )}
        </div>
      </div>

      {/* Billing History Section */}
      <div className="bg-white rounded-xl shadow-lg overflow-hidden">
        <div className="bg-gradient-to-r from-purple-500 to-purple-600 px-6 py-4">
          <div className="flex items-center text-white">
            <TrendingUp className="h-6 w-6 mr-3" />
            <h2 className="text-xl font-bold">
              Billing History ({billingHistory.length})
            </h2>
          </div>
        </div>

        <div className="p-6">
          {billingHistory.length === 0 ? (
            <div className="text-center py-16">
              <div className="inline-flex items-center justify-center w-20 h-20 bg-purple-100 rounded-full mb-4">
                <TrendingUp className="h-10 w-10 text-purple-500" />
              </div>
              <h3 className="text-lg font-semibold text-gray-900 mb-2">
                No Billing History
              </h3>
              <p className="text-gray-500">
                Completed container billing records will appear here
              </p>
            </div>
          ) : (
            <div className="space-y-3">
              {billingHistory.map((record) => (
                <div
                  key={record.billing_id}
                  className="flex justify-between items-center border border-gray-200 rounded-lg p-4 hover:bg-gray-50 transition-colors"
                >
                  <div className="flex items-center">
                    <CheckCircle className="h-5 w-5 text-green-500 mr-3" />
                    <div>
                      <p className="font-semibold text-gray-900">{record.container_name}</p>
                      <p className="text-xs text-gray-500">
                        {formatDuration(record.duration_seconds)} â€¢ Ended {formatTime(record.end_time)}
                      </p>
                    </div>
                  </div>
                  <div className="flex items-center">
                    <span className="px-3 py-1 bg-gray-100 text-gray-700 text-xs rounded-full mr-4">
                      {record.provider}
                    </span>
                    <div className="text-right">
                      <p className="text-xl font-bold text-green-600">
                        ${record.total_cost.toFixed(4)}
                      </p>
                    </div>
                  </div>
                </div>
              ))}
            </div>
          )}
        </div>
      </div>
    </div>
  );
};

export default RealTimeBilling;
