import { useEffect, useState } from 'react';
import { Container, Play, Square, Trash2, RefreshCw, ExternalLink, AlertCircle } from 'lucide-react';
import { getContainers, startContainer, stopContainer, removeContainer } from '../api/api';

const ContainersPage = () => {
  const [containers, setContainers] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [actionLoading, setActionLoading] = useState(null);

  const fetchContainers = async () => {
    try {
      setLoading(true);
      const response = await getContainers(true);
      setContainers(response.data.containers || []);
      setError(null);
    } catch (err) {
      setError('Failed to fetch containers');
      console.error(err);
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    fetchContainers();
    const interval = setInterval(fetchContainers, 5000);
    return () => clearInterval(interval);
  }, []);

  const handleStart = async (id, name) => {
    try {
      setActionLoading(id);
      await startContainer(id);
      await fetchContainers();
    } catch (err) {
      alert('Failed to start container: ' + (err.response?.data?.detail || err.message));
    } finally {
      setActionLoading(null);
    }
  };

  const handleStop = async (id, name) => {
    if (!window.confirm(`Stop container ${name}?`)) return;
    
    try {
      setActionLoading(id);
      await stopContainer(id);
      await fetchContainers();
    } catch (err) {
      alert('Failed to stop container: ' + (err.response?.data?.detail || err.message));
    } finally {
      setActionLoading(null);
    }
  };

  const handleRemove = async (id, name) => {
    if (!window.confirm(`Remove container ${name}? This cannot be undone.`)) return;
    
    try {
      setActionLoading(id);
      await removeContainer(id);
      await fetchContainers();
    } catch (err) {
      alert('Failed to remove container: ' + (err.response?.data?.detail || err.message));
    } finally {
      setActionLoading(null);
    }
  };

  const getStatusColor = (status) => {
    if (status.toLowerCase().includes('running')) return '#10b981';
    if (status.toLowerCase().includes('exited')) return '#6b7280';
    return '#f59e0b';
  };

  const getStatusBadge = (status) => {
    const color = getStatusColor(status);
    return (
      <span style={{
        padding: '0.25rem 0.75rem',
        borderRadius: '9999px',
        fontSize: '0.75rem',
        fontWeight: '600',
        background: `${color}20`,
        color: color
      }}>
        {status}
      </span>
    );
  };

  const getPortNumber = (ports) => {
    if (!ports || ports.length === 0) return null;
    const portStr = ports[0];
    const match = portStr.match(/(\d+):/);
    return match ? match[1] : null;
  };

  return (
    <div>
      <div style={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between', marginBottom: '2rem' }}>
        <div style={{ display: 'flex', alignItems: 'center', gap: '0.75rem' }}>
          <Container style={{ width: '2.5rem', height: '2.5rem', color: '#3b82f6' }} />
          <div>
            <h1 style={{ fontSize: '2.25rem', fontWeight: 'bold', color: '#3b82f6', marginBottom: '0.25rem' }}>
              My Containers
            </h1>
            <p style={{ color: '#6b7280' }}>
              View and manage your deployed containers
            </p>
          </div>
        </div>

        <button
          onClick={fetchContainers}
          disabled={loading}
          style={{
            display: 'flex',
            alignItems: 'center',
            gap: '0.5rem',
            padding: '0.75rem 1.5rem',
            background: '#3b82f6',
            color: 'white',
            border: 'none',
            borderRadius: '0.5rem',
            fontWeight: '600',
            cursor: loading ? 'not-allowed' : 'pointer',
            opacity: loading ? 0.6 : 1
          }}
        >
          <RefreshCw size={18} style={{ animation: loading ? 'spin 1s linear infinite' : 'none' }} />
          Refresh
        </button>
      </div>

      {error && (
        <div style={{ padding: '1rem', background: '#fee2e2', borderRadius: '0.5rem', marginBottom: '1.5rem', display: 'flex', alignItems: 'center', gap: '0.5rem' }}>
          <AlertCircle style={{ color: '#991b1b' }} size={20} />
          <span style={{ color: '#991b1b' }}>{error}</span>
        </div>
      )}

      {loading && containers.length === 0 && (
        <div style={{ textAlign: 'center', padding: '3rem', color: '#6b7280' }}>
          <RefreshCw style={{ width: '3rem', height: '3rem', margin: '0 auto 1rem', animation: 'spin 1s linear infinite' }} />
          <p>Loading containers...</p>
        </div>
      )}

      {!loading && containers.length === 0 && (
        <div className="card" style={{ textAlign: 'center', padding: '3rem' }}>
          <Container style={{ width: '4rem', height: '4rem', color: '#d1d5db', margin: '0 auto 1rem' }} />
          <h3 style={{ fontSize: '1.25rem', fontWeight: '600', color: '#4c1d95', marginBottom: '0.5rem' }}>
            No Containers Yet
          </h3>
          <p style={{ color: '#6b7280', marginBottom: '1.5rem' }}>
            Deploy your first application to see it here
          </p>
        </div>
      )}

      {containers.length > 0 && (
        <div style={{ display: 'grid', gap: '1rem' }}>
          {containers.map((container) => {
            const portNum = getPortNumber(container.ports);
            const isRunning = container.status.toLowerCase().includes('running');
            const isExited = container.status.toLowerCase().includes('exited');
            
            return (
              <div key={container.id} className="card" style={{ padding: '1.5rem' }}>
                <div style={{ display: 'grid', gridTemplateColumns: '1fr auto', gap: '1rem', alignItems: 'start' }}>
                  <div>
                    <div style={{ display: 'flex', alignItems: 'center', gap: '0.75rem', marginBottom: '0.75rem' }}>
                      <h3 style={{ fontSize: '1.125rem', fontWeight: '600', color: '#4c1d95' }}>
                        {container.name || container.id.substring(0, 12)}
                      </h3>
                      {getStatusBadge(container.status)}
                    </div>

                    <div style={{ display: 'grid', gridTemplateColumns: 'repeat(2, 1fr)', gap: '0.75rem', fontSize: '0.875rem', color: '#6b7280' }}>
                      <div>
                        <strong>Image:</strong> {container.image}
                      </div>
                      <div>
                        <strong>ID:</strong> {container.id.substring(0, 12)}
                      </div>
                      <div>
                        <strong>Created:</strong> {new Date(container.created).toLocaleString()}
                      </div>
                      {container.ports && container.ports.length > 0 && (
                        <div>
                          <strong>Ports:</strong> {container.ports.join(', ')}
                        </div>
                      )}
                    </div>

                    {isRunning && portNum && (
                      <div style={{ marginTop: '0.75rem' }}>
                        <a
                          href={`http://localhost:${portNum}`}
                          target="_blank"
                          rel="noopener noreferrer"
                          style={{
                            display: 'inline-flex',
                            alignItems: 'center',
                            gap: '0.25rem',
                            color: '#3b82f6',
                            textDecoration: 'none',
                            fontSize: '0.875rem',
                            fontWeight: '500'
                          }}
                        >
                          <ExternalLink size={16} />
                          http://localhost:{portNum}
                        </a>
                      </div>
                    )}
                  </div>

                  <div style={{ display: 'flex', gap: '0.5rem' }}>
                    {isExited && (
                      <button
                        onClick={() => handleStart(container.id, container.name)}
                        disabled={actionLoading === container.id}
                        style={{
                          padding: '0.5rem 1rem',
                          background: '#10b981',
                          color: 'white',
                          border: 'none',
                          borderRadius: '0.375rem',
                          fontWeight: '500',
                          cursor: actionLoading === container.id ? 'not-allowed' : 'pointer',
                          opacity: actionLoading === container.id ? 0.6 : 1,
                          display: 'flex',
                          alignItems: 'center',
                          gap: '0.25rem',
                          fontSize: '0.875rem'
                        }}
                      >
                        <Play size={16} />
                        Start
                      </button>
                    )}
                    
                    {isRunning && (
                      <button
                        onClick={() => handleStop(container.id, container.name)}
                        disabled={actionLoading === container.id}
                        style={{
                          padding: '0.5rem 1rem',
                          background: '#f59e0b',
                          color: 'white',
                          border: 'none',
                          borderRadius: '0.375rem',
                          fontWeight: '500',
                          cursor: actionLoading === container.id ? 'not-allowed' : 'pointer',
                          opacity: actionLoading === container.id ? 0.6 : 1,
                          display: 'flex',
                          alignItems: 'center',
                          gap: '0.25rem',
                          fontSize: '0.875rem'
                        }}
                      >
                        <Square size={16} />
                        Stop
                      </button>
                    )}

                    <button
                      onClick={() => handleRemove(container.id, container.name)}
                      disabled={actionLoading === container.id}
                      style={{
                        padding: '0.5rem 1rem',
                        background: '#ef4444',
                        color: 'white',
                        border: 'none',
                        borderRadius: '0.375rem',
                        fontWeight: '500',
                        cursor: actionLoading === container.id ? 'not-allowed' : 'pointer',
                        opacity: actionLoading === container.id ? 0.6 : 1,
                        display: 'flex',
                        alignItems: 'center',
                        gap: '0.25rem',
                        fontSize: '0.875rem'
                      }}
                    >
                      <Trash2 size={16} />
                      Remove
                    </button>
                  </div>
                </div>
              </div>
            );
          })}
        </div>
      )}
    </div>
  );
};

export default ContainersPage;
